service: notes-app-api

package:
  individually: true

plugins:
  - serverless-middleware
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-prune-plugin
  - serverless-offline

custom:
  # Our stage is based on what is passed in when running serverless commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-notes
  middleware:
    folderName: _middleware
    pre:
      - src/middleware.bodyParser
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
    packager: "yarn"
  prune:
    automatic: true
    number: 2 # Number of versions to keep

provider:
  name: aws
  stage: ${env:NODE_ENV}
  runtime: nodejs8.10
  region: ${env:REGION}
  environment:
    TABLE_NAME: ${self:custom.tableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ NotesTable, Arn ]

functions: ${file(serverless/routes/index.yml):functions}

resources:
  - ${file(serverless/resources/api-gateway-errors.yml)}
  - ${file(serverless/resources/dynamodb-table.yml)}
  - ${file(serverless/resources/s3-bucket.yml)}
  - ${file(serverless/resources/cognito-user-pool.yml)}
  - ${file(serverless/resources/cognito-identity-pool.yml)}
